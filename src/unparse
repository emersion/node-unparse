#!/usr/bin/env node

var path = require('path');
var configCtrl = require(__dirname+'/config/index.js');
var hasher = require(__dirname+'/lib/hasher.js');

// Get argv
var argv = process.argv;
if (argv[0] == 'node') {
	argv = argv.slice(2);
} else {
	argv = argv.slice(1);
}

// Parse argv
var opt = require('node-getopt').create([
	['h' , 'help', 'display this help'],
	['c', 'config-file=ARG', 'set Unparse config file']
])
.setHelp('Usage: node unparse [OPTIONS]\n'+
	'An open-source clone of Parse.\n\n'+
	'Arguments:\n'+
	'  server  start the server\n'+
	'  init  populate the database with default classes\n\n'+
	'Options:\n[[OPTIONS]]\n')
.bindHelp()
.parseSystem();

if (opt.options['config-file']) {
	var filepath = path.resolve(process.cwd(), opt.options['config-file']);
	configCtrl.setPath(filepath);
}

switch (opt.argv[0]) {
	case 'init':
		// Initialize unparse
		var crypto = require('crypto');
		var db = require(__dirname+'/lib/db');

		/**
		 * Generate a key.
		 * @return {String} The generated key.
		 */
		function generateKey() {
			var sha = crypto.createHash('sha1');
			sha.update(Math.random().toString());
			return sha.digest('hex');
		}

		function populateObjects() {
			// Default role: root
			var roleData = {
				name: 'root',
				ACL: {
					'role:root': { read: true, write: true },
					'*': { read: false, write: false }
				}
			};
			return db.insertObject('_Role', roleData).then(function (role) {
				// Default user: root
				var userData = {
					username: 'root',
					password: 'root',
					roles: [role],
					ACL: {
						'*': { read: false, write: false }
					}
				};
				return hasher.hash(userData.password).then(function (hash) {
					userData.password = hash;
					return userData;
				}).then(function (userData) {
					return db.insertObject('_User', userData);
				}).then(function (user) {
					user.ACL[user.id] = { read: true, write: true };
					return user.save();
				});
			}).then(function (user) {
				console.log('Default user added with username "root" and password "root".');
			});
		}

		// Generate app ID and keys if empty
		var config = null;
		return configCtrl.read().then(function (cfg) {
			config = cfg;

			if (!config.appId) {
				config.appId = generateKey();
				console.log('App ID generated: '+config.appId);
			}

			var keysNames = ['javascriptKey', 'restKey', 'clientKey'];
			for (var i = 0; i < keysNames.length; i++) {
				var keyName = keysNames[i],
					keyValue = config[keyName];

				if (!keyValue) {
					keyValue = generateKey();
					config[keyName] = keyValue;

					console.log(keyName+' generated: '+keyValue);
				}
			}

			return configCtrl.write(config);
		}).then(function () {
			// Populate the database with default classes
			console.log('Connecting to the database...');
			return db.connect(config).then(function () {
				console.log('Populating database with default classes...');
				return db.init();
			}).then(function () {
				console.log('Database populated with default classes.');
			}, function (err) {
				console.error('Failed to populate database classes.');
				throw err;
			});
		}).then(function () {
			// Populate the database with default roles & users
			console.log('Populating database with default roles & users...');
			return populateObjects().then(function () {
				console.log('Database populated with default roles & users.');
			}, function (err) {
				console.error('Failed to populate database roles & users.');
				throw err;
			});
		}).then(function () {
			process.exit(0);
		}, function (err) {
			console.error(err.stack || err);
			process.exit(1);
		});
		return;
	case 'server':
	default:
		// Start the server
		var appBuilder = require(__dirname+'/app');
		var app = appBuilder(configCtrl.readSync());

		var server = app.listen(process.env.PORT || 3000, function() {
			console.log('Server listening on port ' + server.address().port);
		});
		return server;
}
